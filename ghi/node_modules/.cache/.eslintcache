[{"/app/src/index.js":"1","/app/src/App.js":"2","/app/src/reportWebVitals.js":"3","/app/src/app/store.js":"4","/app/src/Construct.js":"5","/app/src/SignupPage.js":"6","/app/src/LoginPage.js":"7","/app/src/SpotifyRandom.js":"8","/app/src/AllPlaylist.js":"9","/app/src/Nav.js":"10","/app/src/SongsInPlaylist.js":"11","/app/src/ErrorNotification.js":"12","/app/src/app/searchSlice.js":"13","/app/src/app/apiSlice.js":"14","/app/src/PlayListPage.js":"15","/app/src/playlist_functions/PlayListFunctions.js":"16","/app/src/playlist_functions/UpdatePlayList.js":"17","/app/src/playlist_functions/PlayListLink.js":"18","/app/src/GetAllGenres.js":"19","/app/src/GenreList.js":"20","/app/src/Search.js":"21","/app/src/SearchAlbums.js":"22","/app/src/SearchTracks.js":"23","/app/src/playlist_functions/CreatePlayList.js":"24","/app/src/ArtistPage.js":"25","/app/src/AlbumInfo.js":"26","/app/src/SongInfo.js":"27","/app/src/GenreArtists.js":"28","/app/src/RecommendationPage.js":"29","/app/src/playlist_functions/DeleteSong.js":"30","/app/src/Recommendations.js":"31","/app/src/playlist_functions/CreateSong.js":"32","/app/src/SearchArtist.js":"33","/app/src/SearchPage.js":"34","/app/src/HomePage.js":"35","/app/src/playlist_functions/SongUp.js":"36","/app/src/playlist_functions/SongDown.js":"37"},{"size":494,"mtime":1694474371753,"results":"38","hashOfConfig":"39"},{"size":3289,"mtime":1694808159417,"results":"40","hashOfConfig":"39"},{"size":362,"mtime":1693872108227,"results":"41","hashOfConfig":"39"},{"size":468,"mtime":1693872108226,"results":"42","hashOfConfig":"39"},{"size":499,"mtime":1693872108223,"results":"43","hashOfConfig":"39"},{"size":2584,"mtime":1693872108225,"results":"44","hashOfConfig":"39"},{"size":1972,"mtime":1694448633994,"results":"45","hashOfConfig":"39"},{"size":2681,"mtime":1694474371751,"results":"46","hashOfConfig":"39"},{"size":1797,"mtime":1694474371743,"results":"47","hashOfConfig":"39"},{"size":3236,"mtime":1694474270280,"results":"48","hashOfConfig":"39"},{"size":257,"mtime":1693940544912,"results":"49","hashOfConfig":"39"},{"size":235,"mtime":1693872108223,"results":"50","hashOfConfig":"39"},{"size":410,"mtime":1694443131434,"results":"51","hashOfConfig":"39"},{"size":5611,"mtime":1694474371752,"results":"52","hashOfConfig":"39"},{"size":3476,"mtime":1694474371744,"results":"53","hashOfConfig":"39"},{"size":344,"mtime":1694443131438,"results":"54","hashOfConfig":"39"},{"size":1569,"mtime":1694443131440,"results":"55","hashOfConfig":"39"},{"size":724,"mtime":1693940544913,"results":"56","hashOfConfig":"39"},{"size":226,"mtime":1694204283758,"results":"57","hashOfConfig":"39"},{"size":1862,"mtime":1694808159418,"results":"58","hashOfConfig":"39"},{"size":1050,"mtime":1694474371747,"results":"59","hashOfConfig":"39"},{"size":1970,"mtime":1694474371748,"results":"60","hashOfConfig":"39"},{"size":5329,"mtime":1694474371750,"results":"61","hashOfConfig":"39"},{"size":1540,"mtime":1694443131435,"results":"62","hashOfConfig":"39"},{"size":6387,"mtime":1694474371743,"results":"63","hashOfConfig":"39"},{"size":4430,"mtime":1694474371741,"results":"64","hashOfConfig":"39"},{"size":4333,"mtime":1694474371750,"results":"65","hashOfConfig":"39"},{"size":1781,"mtime":1694620518420,"results":"66","hashOfConfig":"39"},{"size":205,"mtime":1694474371745,"results":"67","hashOfConfig":"39"},{"size":402,"mtime":1694443131437,"results":"68","hashOfConfig":"39"},{"size":6483,"mtime":1694474371746,"results":"69","hashOfConfig":"39"},{"size":600,"mtime":1694474371878,"results":"70","hashOfConfig":"39"},{"size":2099,"mtime":1694810557913,"results":"71","hashOfConfig":"39"},{"size":360,"mtime":1694474371749,"results":"72","hashOfConfig":"39"},{"size":393,"mtime":1694205942236,"results":"73","hashOfConfig":"39"},{"size":319,"mtime":1694474371885,"results":"74","hashOfConfig":"39"},{"size":332,"mtime":1694474371884,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yuxb4d",{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"85"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"85"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"85"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"118"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/app/src/index.js",[],[],"/app/src/App.js",["197","198","199","200"],[],"/app/src/reportWebVitals.js",[],[],[],"/app/src/app/store.js",[],[],"/app/src/Construct.js",[],[],"/app/src/SignupPage.js",["201"],[],"import { useState } from \"react\";\nimport { useSignupMutation } from \"./app/apiSlice\";\nimport { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction SignupPage() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwordConfirmation, setPasswordConfirmation] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [signup, signupResponse] = useSignupMutation();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (signupResponse.isSuccess) navigate(`${\"HomePage\"}`);\n  }, [signupResponse]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (password !== passwordConfirmation) {\n      setErrorMessage(\"Password and confirmation do not match\");\n      return;\n    }\n    signup({ username, password });\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-6 offset-md-3\">\n        <h1>Signup Page</h1>\n        {errorMessage && (\n          <div className=\"alert alert-danger\" role=\"alert\">\n            {errorMessage}\n          </div>\n        )}\n        <form onSubmit={handleSubmit}>\n          <div className=\"mb-3\">\n            <label htmlFor=\"Login_username\" className=\"form-label\">\n              Username\n            </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"Login_username\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n          </div>\n          <div className=\"mb-3\">\n            <label htmlFor=\"Signup_password\" className=\"form-label\">\n              Password\n            </label>\n            <input\n              type=\"password\"\n              className=\"form-control\"\n              id=\"Signup_password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n          </div>\n          <div className=\"mb-3\">\n            <label\n              htmlFor=\"Signup_password_confirmation\"\n              className=\"form-label\"\n            >\n              Password confirmation\n            </label>\n            <input\n              type=\"password\"\n              className=\"form-control\"\n              id=\"Signup_password_confirmation\"\n              value={passwordConfirmation}\n              onChange={(e) => setPasswordConfirmation(e.target.value)}\n            />\n          </div>\n          <button type=\"submit\" className=\"btn btn-success\">\n            Submit\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default SignupPage;\n","/app/src/LoginPage.js",["202"],[],"import { useState } from \"react\";\nimport { useLoginMutation } from \"./app/apiSlice\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\nfunction LoginPage() {\n  const [login, loginResponse] = useLoginMutation();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (loginResponse.isSuccess) navigate(`${\"allplaylist\"}`);\n    if (loginResponse.isError) {\n      setErrorMessage(loginResponse.error.data.detail);\n    }\n  }, [loginResponse]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    login({ username, password });\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-6 offset-md-3\">\n        <h1>Login Page</h1>\n        {errorMessage && (\n          <div className=\"alert alert-danger\" role=\"alert\">\n            {errorMessage}\n          </div>\n        )}\n        <form onSubmit={handleSubmit}>\n          <div className=\"mb-3\">\n            <label htmlFor=\"Login_username\" className=\"form-label\">\n              Username\n            </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"Login_username\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n          </div>\n          <div className=\"mb-3\">\n            <label htmlFor=\"Login_password\" className=\"form-label\">\n              Password\n            </label>\n            <input\n              type=\"password\"\n              className=\"form-control\"\n              id=\"Login_password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n          </div>\n          <button type=\"submit\" className=\"btn btn-success\">\n            Submit\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default LoginPage;\n","/app/src/SpotifyRandom.js",[],[],"/app/src/AllPlaylist.js",["203"],[],"/app/src/Nav.js",["204","205"],[],"/app/src/SongsInPlaylist.js",[],[],"/app/src/ErrorNotification.js",[],[],"/app/src/app/searchSlice.js",[],[],[],"/app/src/app/apiSlice.js",[],[],"/app/src/PlayListPage.js",["206","207"],[],"/app/src/playlist_functions/PlayListFunctions.js",[],[],"/app/src/playlist_functions/UpdatePlayList.js",[],[],"/app/src/playlist_functions/PlayListLink.js",["208"],[],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useGetSpecificPlaylistQuery } from \"../app/apiSlice\";\n// import { SpecificPlayList} from \"./PlayListPage\"\n\n\nfunction PlaylistLink({ playlist }) {\n  const { data: playlistData, error, isLoading } = useGetSpecificPlaylistQuery(playlist.id);\n\n  return (\n    <Link to={`/${playlist.id}`}>\n      {isLoading ? 'Loading...' : playlistData.name }\n    </Link>\n\n//     <Link to={`AllPlaylist/${playlist.id}`}>\n//   {isLoading ? 'Loading...' : (\n//     <>\n//       {playlistData.name}\n//       {playlistData && (\n//         <SpecificPlayList playlist_id={playlistData.id} />\n//       )}\n//     </>\n//   )}\n// </Link>\n\n  );\n}\n\n\n\n\nexport default PlaylistLink;\n","/app/src/GetAllGenres.js",["209","210"],[],"import Search from \"./Search\"\nimport AllGenreList from \"./GenreList\"\nimport { useState } from \"react\";\n\nconst GetAllGenres = () => {\n    const [search, setSearch] = useState('')\n\n    return (\n        <>\n            <Search />\n            <AllGenreList />\n        </>\n    )\n}\n\nexport default GetAllGenres;\n","/app/src/GenreList.js",["211","212","213","214"],[],"/app/src/Search.js",[],[],"/app/src/SearchAlbums.js",["215","216"],[],"/app/src/SearchTracks.js",["217","218"],[],"import { useSelector } from \"react-redux\";\nimport { useLazySearchSpotifyQuery, useGetAllPlaylistQuery } from \"./app/apiSlice\";\nimport { Link } from \"react-router-dom\";\nimport { Dropdown } from \"react-bootstrap\";\nimport React, { useState, useEffect } from \"react\";\nimport CreateSongButton from \"./playlist_functions/CreateSong.js\";\n\nfunction SearchTracks() {\n  const sSpotify = useSelector((state) => state.search.value);\n  const { data: playLists } = useGetAllPlaylistQuery();\n  const [selectedPlaylists, setSelectedPlaylists] = useState([]);\n  const handlePlaylistChange = (index, playlistId, playlistName) => {\n    const updatedPlaylists = [...selectedPlaylists];\n    updatedPlaylists[index] = { id: playlistId, name: playlistName };\n    setSelectedPlaylists(updatedPlaylists);\n  };\n\n\n  const params = {\n    search: sSpotify,\n    type: \"artist,album,track\",\n    limit: 4,\n    offset: 0,\n  };\n  const [trigger,{ data, isLoading }] = useLazySearchSpotifyQuery();\n\n  useEffect(() => {\n    if (sSpotify) {\n      trigger(params)\n    }\n  }, [sSpotify])\n  if (isLoading) {\n    return <progress className=\"progress is-primary\" max=\"100\"></progress>;\n  }\n\n  return (\n    data && (\n      <div className=\"row mt-3\">\n        <h1>Related Tracks</h1>\n        <table className=\"table table-striped table-sm\">\n          <thead>\n            <tr>\n              <th>Image</th>\n              <th>Name</th>\n              <th>Artist</th>\n              <th>Length</th>\n              <th>Playlists</th>\n              <th>Add</th>\n            </tr>\n          </thead>\n          <tbody>\n            {data[0][1]?.tracks_info.map((track, index) => {\n              const artistLinks = track.artist_name.map((artist, index) => (\n                <Link\n                  className=\"link-primary text-decoration-none\"\n                  key={index}\n                  to={`/spotify/artists/${artist[\"id\"]}`}\n                >\n                  {artist.artist_name}\n                  <br />\n                </Link>\n              ));\n\n              return (\n                <tr key={track.id}>\n                  <td>\n                    <Link\n                      className=\"link-primary text-decoration-none\"\n                      to={`/spotify/tracks/${track.id}`}\n                    >\n                      <img\n                        src={track.album_image}\n                        width=\"90px\"\n                        height=\"90px\"\n                      ></img>\n                    </Link>\n                  </td>\n                  <td>\n                    <Link\n                      className=\"link-primary text-decoration-none\"\n                      to={`/spotify/tracks/${track.id}`}\n                    >\n                      {track.name}\n                    </Link>\n                  </td>\n                  <td>{artistLinks}</td>\n                  <td>\n                    {Math.floor(track.duration_ms / 60000)}:\n                    {((track.duration_ms / 1000) % 60)\n                      .toFixed()\n                      .padStart(2, \"0\")}\n                  </td>\n                  <td>\n                    <div className=\"dropdown\">\n                      <Dropdown>\n                        <Dropdown.Toggle\n                          variant=\"secondary\"\n                          id={`dropdownMenuButton_${index}`}\n                        >\n                          {selectedPlaylists[index]\n                            ? selectedPlaylists[index].name\n                            : \"Select Playlist\"}\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu>\n                          {playLists &&\n                            playLists?.playlists.map((playlist) => (\n                              <Dropdown.Item\n                                key={playlist.id}\n                                onClick={() =>\n                                  handlePlaylistChange(\n                                    index,\n                                    playlist.id,\n                                    playlist.name\n                                  )\n                                }\n                              >\n                                {playlist.name}\n                              </Dropdown.Item>\n                            ))}\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </div>\n                  </td>\n                  <td>\n                    <CreateSongButton\n                      data={{\n                        playlist_id:\n                          selectedPlaylists[index] &&\n                          selectedPlaylists[index].id,\n                        track_number: track && track[\"track_number\"],\n                        name: track && track[\"name\"],\n                        album: track && track[\"album_name\"],\n                        album_id: track && track[\"album_id\"],\n                        album_image: track && track[\"album_image\"],\n                        duration: track && track[\"duration_ms\"],\n                        spotify_id: track && track[\"id\"],\n                        artist: track && track[\"artist_name\"],\n                      }}\n                    />\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    )\n  );\n}\nexport default SearchTracks;\n","/app/src/playlist_functions/CreatePlayList.js",[],[],"/app/src/ArtistPage.js",["219","220","221"],[],"import { useGetSpotifyArtistQuery, useGetAllPlaylistQuery } from \"./app/apiSlice\";\nimport { Link } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport {\n  MDBCol,\n  MDBCard,\n  MDBCardBody,\n  MDBCardTitle,\n  MDBCardText,\n  MDBCardImage,\n} from \"mdb-react-ui-kit\";\nimport \"./App.css\";\nimport { Dropdown } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\nimport CreateSongButton from \"./playlist_functions/CreateSong.js\";\n\n\n\nfunction ArtistPage() {\n  const { id } = useParams();\n  const { data: playLists } = useGetAllPlaylistQuery();\n  const [selectedPlaylists, setSelectedPlaylists] = useState([]);\n\n  const handlePlaylistChange = (index, playlistId, playlistName) => {\n    const updatedPlaylists = [...selectedPlaylists];\n    updatedPlaylists[index] = { id: playlistId, name: playlistName };\n    setSelectedPlaylists(updatedPlaylists);\n  };\n\n  const { data: artist, isLoading } = useGetSpotifyArtistQuery(id);\n\n  if (isLoading) {\n    return <progress className=\"progress is-primary\" max=\"100\"></progress>;\n  }\n\n  return (\n    artist && (\n\n      <div className=\"row mt-3\" >\n        <div className=\"d-flex justify-content-center pt-4\">\n          <h1>\n          <img\n            src={artist[0][\"artist_info\"][0][\"image\"]}\n            width=\"200px\"\n            height=\"200px\"\n          ></img>\n        </h1>\n        </div>\n\n        <h1>{artist[0][\"artist_info\"][0][\"name\"]}</h1>\n        <h5>Top Tracks</h5>\n                <table className=\"table table-striped\">\n          <thead>\n            <tr>\n              <th>Image</th>\n              <th>Name</th>\n              <th>Album</th>\n              <th>Artist</th>\n              <th>Length</th>\n              <th>Playlists</th>\n              <th>Add</th>\n            </tr>\n          </thead>\n          <tbody>\n            {artist[0]?.top_tracks_info.map((track, index) => {\n              const artistLinks = track.artist_name.map((artist, index) => (\n                <Link\n                  className=\"link-primary text-decoration-none\"\n                  key={index}\n                  to={`/spotify/artists/${artist[\"id\"]}`}\n                >\n                  {artist.artist_name}\n                  <br />\n                </Link>\n              ));\n              return (\n                <tr key={track.id}>\n                  <td>\n                    <img\n            src={track.album_image}\n            width=\"50px\"\n            height=\"50px\"\n          ></img></td>\n                  <td>\n                    <Link\n                    className=\"link-primary text-decoration-none\"\n                      to={`/spotify/tracks/${track.id}`}\n                    >\n                      {track.name}\n                    </Link>\n                  </td>\n                  <td>\n                    <Link\n                    className=\"link-primary text-decoration-none\"\n                      to={`/spotify/albums/${track.album_id}`}\n                    >\n                      {track.album_name}\n                    </Link>\n                  </td>\n                  <td>\n                  {artistLinks}\n                  </td>\n                  <td>\n                    {Math.floor(track.duration_ms / 60000)}:\n                    {((track.duration_ms / 1000) % 60)\n                      .toFixed()\n                      .padStart(2, \"0\")}\n                  </td>\n                  <td>\n                    <div className=\"dropdown\">\n                      <Dropdown>\n                        <Dropdown.Toggle\n                          variant=\"secondary\"\n                          id={`dropdownMenuButton_${index}`}\n                        >\n                          {selectedPlaylists[index]\n                            ? selectedPlaylists[index].name\n                            : \"Select Playlist\"}\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu>\n                          {playLists &&\n                            playLists?.playlists.map((playlist) => (\n                              <Dropdown.Item\n                                key={playlist.id}\n                                onClick={() =>\n                                  handlePlaylistChange(\n                                    index,\n                                    playlist.id,\n                                    playlist.name\n                                  )\n                                }\n                              >\n                                {playlist.name}\n                              </Dropdown.Item>\n                            ))}\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </div>\n                  </td>\n                  <td>\n                    <CreateSongButton\n                      data={{\n                        playlist_id:\n                          selectedPlaylists[index] &&\n                          selectedPlaylists[index].id,\n                        track_number: track[\"track_number\"],\n                        name: track[\"name\"],\n                        album: track && track[\"album_name\"],\n                        album_id: track && track[\"album_id\"],\n                        album_image: track && track[\"album_image\"],\n                        duration: track[\"duration_ms\"],\n                        spotify_id: track[\"id\"],\n                        artist: track[\"artist_name\"],\n                      }}\n                    />\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <h5>Albums</h5>\n            <div className=\"card-container\">\n      {artist[0]?.albums_info.map((album) => (\n        <MDBCol sm=\"2\" key={album.id}>\n          <MDBCard>\n            <MDBCardImage\n              src={album.image}\n              position=\"top\"\n              alt=\"...\"\n            />\n            <MDBCardBody>\n              <MDBCardTitle className=\"card-title\">\n                <Link\n                  className=\"link-primary text-decoration-none\"\n                  to={`/spotify/albums/${album.id}`}\n                >\n                  {album.name}\n                </Link>\n              </MDBCardTitle>\n                <MDBCardText>\n                    {album.release_date}\n                </MDBCardText>\n            </MDBCardBody>\n          </MDBCard>\n        </MDBCol>\n      ))}\n    </div>\n      </div>\n    )\n  );\n}\nexport default ArtistPage;\n","/app/src/AlbumInfo.js",["222"],[],"/app/src/SongInfo.js",["223"],[],"/app/src/GenreArtists.js",["224","225"],[],"/app/src/RecommendationPage.js",[],[],"/app/src/playlist_functions/DeleteSong.js",["226","227"],[],"import { useDeleteSongMutation } from \"../app/apiSlice\";\nimport { useState, useEffect } from \"react\";\n\nconst DeleteSongButton = ({ sId, pId }) => {\n  const [deleteSong] = useDeleteSongMutation();\n\n  return (\n    <>\n      <button\n        className=\"btn btn-danger\"\n        onClick={() => deleteSong({ sId, pId })}\n      >\n        Delete\n      </button>\n    </>\n  );\n};\n\nexport default DeleteSongButton;\n","/app/src/Recommendations.js",["228"],[],"import React, { useState } from \"react\";\nimport {\n  useLazyGetSpotifyRecommendationsQuery,\n  useGetAllGenreQuery,\n  useGetAllPlaylistQuery\n} from \"./app/apiSlice\";\nimport { Dropdown } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport CreateSongButton from \"./playlist_functions/CreateSong.js\";\n\nfunction Recommendations() {\n  const [inputValue, setInputValue] = useState(\"\");\n  const { data: playLists } = useGetAllPlaylistQuery();\n  const [selectedGenre, setSelectedGenre] = useState(\"Genre\");\n\n  const [selectedPlaylists, setSelectedPlaylists] = useState([]);\n\n  const handlePlaylistChange = (index, playlistId, playlistName) => {\n    const updatedPlaylists = [...selectedPlaylists];\n    updatedPlaylists[index] = { id: playlistId, name: playlistName };\n    setSelectedPlaylists(updatedPlaylists);\n  };\n\n  const handleInputChange = (e) => {\n    const value = e.target.value;\n    setInputValue(value);\n  };\n\n  const { data: genres } = useGetAllGenreQuery();\n\n  const handleGenreSelect = (genre) => {\n    setSelectedGenre(genre);\n  };\n\n  const params = {\n    genre: selectedGenre,\n    artist: inputValue,\n  };\n  const [trigger, { data }] = useLazyGetSpotifyRecommendationsQuery();\n\n  const handleTrigger = () => {\n    trigger(params);\n  };\n\n\n\n  return (\n    <div className=\"card text-end\">\n      <div className=\"card-body\">\n        <form className=\"row align-items-center\">\n          <div className=\"col-md-8 mb-3\">\n            <input\n              className=\"form-control form-control-lg form-control\"\n              type=\"text\"\n              id=\"seedArtist\"\n              placeholder=\"Enter artist & select genre from dropdown\"\n              value={inputValue}\n              onChange={handleInputChange}\n            />\n          </div>\n\n          <div className=\"col-md-1 mb-3\">\n            <Dropdown>\n              <Dropdown.Toggle\n                variant=\"secondary btn-lg\"\n                id=\"dropdownMenuButton\"\n              >\n                {selectedGenre}\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                {genres &&\n                  genres[0]?.genres.map((genre) => (\n                    <Dropdown.Item\n                      value={selectedGenre}\n                      key={genre}\n                      onClick={(e) => handleGenreSelect(genre)}\n                    >\n                      {genre}\n                    </Dropdown.Item>\n                  ))}\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n          <div className=\"col-md-3 mb-3\">\n            <Button variant=\"success btn-lg\" onClick={handleTrigger}>\n              Search\n            </Button>\n          </div>\n        </form>\n        <div></div>\n\n        {data && (\n          <div className=\"text-start\">\n            <h1>\n              {inputValue} & {selectedGenre} Song recommendations:\n            </h1>\n\n            <table className=\"table table-striped\">\n              <thead>\n                <tr>\n                  <th>Image</th>\n                  <th>Name</th>\n                  <th>Playlists</th>\n                  <th>Add</th>\n                </tr>\n              </thead>\n              <tbody>\n                {data[0]?.map((track, index) => {\n                  return (\n                    <tr key={track.id}>\n                      <td>\n                        <Link\n                          className=\"link-primary text-decoration-none\"\n                          to={`/spotify/tracks/${track.id}`}\n                        >\n                          <img\n                            src={track.image}\n                            width=\"90px\"\n                            height=\"90px\"\n                            alt=\"\"\n                          />\n                        </Link>\n                      </td>\n                      <td>\n                        <Link\n                          className=\"link-primary text-decoration-none\"\n                          to={`/spotify/tracks/${track.id}`}\n                        >\n                          {track.name}\n                        </Link>\n                      </td>\n                                        <td>\n                    <div className=\"dropdown\">\n                      <Dropdown>\n                        <Dropdown.Toggle\n                          variant=\"secondary\"\n                          id={`dropdownMenuButton_${index}`}\n                        >\n                          {selectedPlaylists[index]\n                            ? selectedPlaylists[index].name\n                            : \"Select Playlist\"}\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu>\n                          {playLists &&\n                            playLists?.playlists.map((playlist) => (\n                              <Dropdown.Item\n                                key={playlist.id}\n                                onClick={() =>\n                                  handlePlaylistChange(\n                                    index,\n                                    playlist.id,\n                                    playlist.name\n                                  )\n                                }\n                              >\n                                {playlist.name}\n                              </Dropdown.Item>\n                            ))}\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </div>\n                  </td>\n                  <td>\n                    <CreateSongButton\n                      data={{\n                        playlist_id:\n                          selectedPlaylists[index] &&\n                          selectedPlaylists[index].id,\n                        track_number: track && track[\"track_number\"],\n                        name: track && track[\"name\"],\n                        album: track && track[\"album_name\"],\n                        album_id: track && track[\"album_id\"],\n                        album_image: track && track[\"image\"],\n                        duration: track && track[\"duration_ms\"],\n                        spotify_id: track && track[\"id\"],\n                        artist: track && track[\"artist_name\"],\n                      }}\n                    />\n                  </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Recommendations;\n","/app/src/playlist_functions/CreateSong.js",["229"],[],"/app/src/SearchArtist.js",["230","231","232","233"],[],"/app/src/SearchPage.js",[],[],"/app/src/HomePage.js",[],[],"/app/src/playlist_functions/SongUp.js",[],[],"/app/src/playlist_functions/SongDown.js",[],[],{"ruleId":"234","severity":1,"message":"235","line":1,"column":10,"nodeType":"236","messageId":"237","endLine":1,"endColumn":19},{"ruleId":"234","severity":1,"message":"238","line":1,"column":21,"nodeType":"236","messageId":"237","endLine":1,"endColumn":29},{"ruleId":"234","severity":1,"message":"239","line":2,"column":8,"nodeType":"236","messageId":"237","endLine":2,"endColumn":17},{"ruleId":"234","severity":1,"message":"240","line":3,"column":8,"nodeType":"236","messageId":"237","endLine":3,"endColumn":25},{"ruleId":"241","severity":1,"message":"242","line":16,"column":6,"nodeType":"243","endLine":16,"endColumn":22,"suggestions":"244"},{"ruleId":"241","severity":1,"message":"242","line":18,"column":6,"nodeType":"243","endLine":18,"endColumn":21,"suggestions":"245"},{"ruleId":"234","severity":1,"message":"246","line":9,"column":28,"nodeType":"236","messageId":"237","endLine":9,"endColumn":33},{"ruleId":"241","severity":1,"message":"242","line":16,"column":6,"nodeType":"243","endLine":16,"endColumn":22,"suggestions":"247"},{"ruleId":"248","severity":1,"message":"249","line":29,"column":11,"nodeType":"250","endLine":29,"endColumn":57},{"ruleId":"234","severity":1,"message":"246","line":20,"column":5,"nodeType":"236","messageId":"237","endLine":20,"endColumn":10},{"ruleId":"248","severity":1,"message":"249","line":65,"column":19,"nodeType":"250","endLine":69,"endColumn":20},{"ruleId":"234","severity":1,"message":"246","line":8,"column":31,"nodeType":"236","messageId":"237","endLine":8,"endColumn":36},{"ruleId":"234","severity":1,"message":"251","line":6,"column":12,"nodeType":"236","messageId":"237","endLine":6,"endColumn":18},{"ruleId":"234","severity":1,"message":"252","line":6,"column":20,"nodeType":"236","messageId":"237","endLine":6,"endColumn":29},{"ruleId":"234","severity":1,"message":"253","line":12,"column":10,"nodeType":"236","messageId":"237","endLine":12,"endColumn":16},{"ruleId":"234","severity":1,"message":"254","line":12,"column":18,"nodeType":"236","messageId":"237","endLine":12,"endColumn":23},{"ruleId":"234","severity":1,"message":"235","line":13,"column":17,"nodeType":"236","messageId":"237","endLine":13,"endColumn":26},{"ruleId":"234","severity":1,"message":"255","line":17,"column":9,"nodeType":"236","messageId":"237","endLine":17,"endColumn":17},{"ruleId":"241","severity":1,"message":"256","line":20,"column":6,"nodeType":"243","endLine":20,"endColumn":16,"suggestions":"257"},{"ruleId":"248","severity":1,"message":"249","line":48,"column":23,"nodeType":"250","endLine":48,"endColumn":73},{"ruleId":"234","severity":1,"message":"235","line":5,"column":27,"nodeType":"236","messageId":"237","endLine":5,"endColumn":36},{"ruleId":"248","severity":1,"message":"249","line":68,"column":23,"nodeType":"250","endLine":72,"endColumn":24},{"ruleId":"234","severity":1,"message":"235","line":14,"column":27,"nodeType":"236","messageId":"237","endLine":14,"endColumn":36},{"ruleId":"248","severity":1,"message":"249","line":44,"column":11,"nodeType":"250","endLine":48,"endColumn":12},{"ruleId":"248","severity":1,"message":"249","line":79,"column":21,"nodeType":"250","endLine":83,"endColumn":12},{"ruleId":"248","severity":1,"message":"249","line":34,"column":11,"nodeType":"250","endLine":38,"endColumn":12},{"ruleId":"248","severity":1,"message":"249","line":44,"column":11,"nodeType":"250","endLine":48,"endColumn":12},{"ruleId":"234","severity":1,"message":"246","line":17,"column":5,"nodeType":"236","messageId":"237","endLine":17,"endColumn":10},{"ruleId":"248","severity":1,"message":"249","line":45,"column":21,"nodeType":"250","endLine":49,"endColumn":22},{"ruleId":"234","severity":1,"message":"238","line":2,"column":10,"nodeType":"236","messageId":"237","endLine":2,"endColumn":18},{"ruleId":"234","severity":1,"message":"235","line":2,"column":20,"nodeType":"236","messageId":"237","endLine":2,"endColumn":29},{"ruleId":"234","severity":1,"message":"258","line":47,"column":9,"nodeType":"236","messageId":"237","endLine":47,"endColumn":21},{"ruleId":"234","severity":1,"message":"259","line":8,"column":13,"nodeType":"236","messageId":"237","endLine":8,"endColumn":21},{"ruleId":"234","severity":1,"message":"253","line":5,"column":10,"nodeType":"236","messageId":"237","endLine":5,"endColumn":16},{"ruleId":"241","severity":1,"message":"256","line":24,"column":6,"nodeType":"243","endLine":24,"endColumn":16,"suggestions":"260"},{"ruleId":"241","severity":1,"message":"261","line":30,"column":6,"nodeType":"243","endLine":30,"endColumn":12,"suggestions":"262"},{"ruleId":"248","severity":1,"message":"249","line":56,"column":23,"nodeType":"250","endLine":60,"endColumn":24},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Construct' is defined but never used.","'ErrorNotification' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["263"],["264"],"'error' is assigned a value but never used.",["265"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'search' is assigned a value but never used.","'setSearch' is assigned a value but never used.","'search' is defined but never used.","'reset' is defined but never used.","'dispatch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'params' and 'trigger'. Either include them or remove the dependency array.",["266"],"'handleSubmit' is assigned a value but never used.","'response' is assigned a value but never used.",["267"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["268"],{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"275","fix":"277"},{"desc":"278","fix":"279"},"Update the dependencies array to be: [navigate, signupResponse]",{"range":"280","text":"281"},"Update the dependencies array to be: [loginResponse, navigate]",{"range":"282","text":"283"},"Update the dependencies array to be: [logoutResponse, navigate]",{"range":"284","text":"285"},"Update the dependencies array to be: [params, sSpotify, trigger]",{"range":"286","text":"287"},{"range":"288","text":"287"},"Update the dependencies array to be: [data, dispatch]",{"range":"289","text":"290"},[595,611],"[navigate, signupResponse]",[615,630],"[loginResponse, navigate]",[505,521],"[logoutResponse, navigate]",[526,536],"[params, sSpotify, trigger]",[628,638],[714,720],"[data, dispatch]"]