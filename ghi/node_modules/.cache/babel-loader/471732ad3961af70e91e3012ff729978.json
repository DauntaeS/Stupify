{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nexport const stupifyApi = createApi({\n  reducerPath: \"playlistApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: process.env.REACT_APP_API_HOST\n  }),\n  tagTypes: [\"playlist\", \"songs\"],\n  endpoints: builder => ({\n    getAllPlaylist: builder.query({\n      query: () => ({\n        url: \"/api/playlists\",\n        credentials: \"include\"\n      }),\n      providesTags: [\"playlist\"] //Optional - transformResponse: (response) => response.playlists ... removes the playlists property from the data in so in the\n      // PlaylistList you can just do data.filter\n\n    }),\n    createPlaylist: builder.mutation({\n      query: data => ({\n        url: \"/api/playlists/\",\n        body: data,\n        method: \"POST\",\n        credentials: \"include\"\n      }),\n      invalidatesTags: [\"playlist\"]\n    }),\n    getSpecificPlaylist: builder.query({\n      query: playlist_id => ({\n        url: `/api/playlists/${playlist_id}`,\n        credentials: \"include\"\n      }),\n      providesTags: [\"playlist\"]\n    }),\n    deletePlaylist: builder.mutation({\n      query: playlist_id => ({\n        url: `/api/playlists/${playlist_id}`,\n        method: \"delete\",\n        credentials: \"include\"\n      }),\n      invalidatesTags: [\"playlist\"]\n    }),\n    updatePlaylist: builder.mutation({\n      query: data => ({\n        url: `/api/playlists/${data.playlist_id}`,\n        body: data,\n        method: \"PUT\",\n        credentials: \"include\"\n      }),\n      invalidatesTags: [\"playlist\"]\n    }),\n    deleteSong: builder.mutation({\n      query: data => ({\n        url: `/api/playlists/${data.playlist_id}/songs/${data.song_id}`,\n        body: data.song_id,\n        method: \"delete\",\n        credentials: \"include\"\n      }),\n      invalidatesTags: [\"songs\"]\n    }),\n    getAllSongsInPlaylist: builder.query({\n      query: playlist_id => ({\n        url: `/api/playlists/${playlist_id}/songs`,\n        credentials: \"include\"\n      }),\n      providesTags: [\"songs\"]\n    }),\n    createSongInPlaylist: builder.mutation({\n      query: data => ({\n        url: `/api/playlists/${data.playlist_id}/songs`,\n        body: data,\n        method: \"POST\",\n        credentials: \"include\"\n      }),\n      invalidatesTags: [\"playlist\"]\n    }),\n    searchSpotify: builder.query({\n      query: data => ({\n        url: `/api/spotify`,\n        body: data,\n        method: \"GET\"\n      })\n    }),\n    searchSpotifyGenre: builder.query({\n      query: data => ({\n        url: `/api/spotify/genres`,\n        body: data,\n        method: \"GET\"\n      })\n    }),\n    getAllGenre: builder.query({\n      query: () => `/api/spotify/all_genres`\n    }),\n    getSpotifyArtist: builder.query({\n      query: data => ({\n        url: `/api/spotify/artists/${data.id}`,\n        body: data,\n        method: \"GET\"\n      })\n    }),\n    getSpotifyAlbum: builder.query({\n      query: data => ({\n        url: `/api/spotify/albums/${data.id}`,\n        body: data,\n        method: \"GET\"\n      })\n    }),\n    getSpotifyTrack: builder.query({\n      query: data => ({\n        url: `/api/spotify/tracks/${data.id}`,\n        body: data,\n        method: \"GET\"\n      })\n    }),\n    getSpotifyRecommendations: builder.query({\n      query: data => ({\n        url: `/api/spotify/recommendations/`,\n        body: data,\n        method: \"GET\"\n      })\n    }),\n    getSpotifyRandom: builder.query({\n      query: () => `/api/spotify/random`\n    }),\n    getSpotifyRandomArtist: builder.query({\n      query: () => `/api/spotify/randomartists`\n    }),\n    getToken: builder.query({\n      query: () => ({\n        url: `/token`,\n        credentials: \"include\"\n      }),\n      transformResponse: response => (response === null || response === void 0 ? void 0 : response.account) || null,\n      providesTags: [\"Account\"]\n    }),\n    logout: builder.mutation({\n      query: () => ({\n        url: `/token`,\n        method: \"DELETE\",\n        credentials: \"include\"\n      }),\n      invalidatesTags: [\"Account\"]\n    }),\n    login: builder.mutation({\n      query: info => {\n        const formData = new FormData();\n        formData.append(\"username\", info.username);\n        formData.append(\"password\", info.password);\n        return {\n          url: \"/token\",\n          method: \"POST\",\n          body: formData,\n          credentials: \"include\"\n        };\n      },\n      invalidatesTags: [\"Account\"]\n    }),\n    signup: builder.mutation({\n      query: data => ({\n        url: `/api/accounts`,\n        body: data,\n        method: \"POST\",\n        credentials: \"include\"\n      }),\n      invalidatesTags: [\"Account\"]\n    })\n  })\n});\nexport const {\n  useGetTokenQuery,\n  useSignupMutation,\n  useLoginMutation,\n  useLogoutMutation,\n  useGetAllPlaylistQuery,\n  useCreatePlaylistMutation,\n  useGetSpecificPlaylistQuery,\n  useDeletePlaylistMutation,\n  useUpdatePlaylistMutation,\n  useDeleteSongMutation,\n  useGetAllSongsInPlaylistQuery,\n  useCreateSongInPlaylistMutation,\n  useSearchSpotifyGenreQuery,\n  useGetAllGenreQuery,\n  useGetSpotifyArtistQuery,\n  useGetSpotifyAlbumQuery,\n  useGetSpotifyTrackQuery,\n  useGetSpotifyRecommendationsQuery,\n  useGetSpotifyRandomQuery,\n  useGetSpotifyRandomArtistQuery\n} = stupifyApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","stupifyApi","reducerPath","baseQuery","baseUrl","process","env","REACT_APP_API_HOST","tagTypes","endpoints","builder","getAllPlaylist","query","url","credentials","providesTags","createPlaylist","mutation","data","body","method","invalidatesTags","getSpecificPlaylist","playlist_id","deletePlaylist","updatePlaylist","deleteSong","song_id","getAllSongsInPlaylist","createSongInPlaylist","searchSpotify","searchSpotifyGenre","getAllGenre","getSpotifyArtist","id","getSpotifyAlbum","getSpotifyTrack","getSpotifyRecommendations","getSpotifyRandom","getSpotifyRandomArtist","getToken","transformResponse","response","account","logout","login","info","formData","FormData","append","username","password","signup","useGetTokenQuery","useSignupMutation","useLoginMutation","useLogoutMutation","useGetAllPlaylistQuery","useCreatePlaylistMutation","useGetSpecificPlaylistQuery","useDeletePlaylistMutation","useUpdatePlaylistMutation","useDeleteSongMutation","useGetAllSongsInPlaylistQuery","useCreateSongInPlaylistMutation","useSearchSpotifyGenreQuery","useGetAllGenreQuery","useGetSpotifyArtistQuery","useGetSpotifyAlbumQuery","useGetSpotifyTrackQuery","useGetSpotifyRecommendationsQuery","useGetSpotifyRandomQuery","useGetSpotifyRandomArtistQuery"],"sources":["/app/src/app/apiSlice.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nexport const stupifyApi = createApi({\n  reducerPath: \"playlistApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: process.env.REACT_APP_API_HOST,\n  }),\n  tagTypes: [\"playlist\", \"songs\"],\n  endpoints: (builder) => ({\n    getAllPlaylist: builder.query({\n      query: () => ({\n      url: \"/api/playlists\",\n      credentials: \"include\"}),\n      providesTags: [\"playlist\"],\n      //Optional - transformResponse: (response) => response.playlists ... removes the playlists property from the data in so in the\n      // PlaylistList you can just do data.filter\n    }),\n    createPlaylist: builder.mutation({\n      query: (data) => ({\n        url: \"/api/playlists/\",\n        body: data,\n        method: \"POST\",\n        credentials: \"include\",\n      }),\n      invalidatesTags: [\"playlist\"],\n    }),\n    getSpecificPlaylist: builder.query({\n      query: (playlist_id) => ({\n      url: `/api/playlists/${playlist_id}`,\n      credentials: \"include\" }),\n      providesTags: [\"playlist\"],\n    }),\n    deletePlaylist: builder.mutation({\n      query: (playlist_id) => ({\n        url: `/api/playlists/${playlist_id}`,\n        method: \"delete\",\n        credentials: \"include\",\n      }),\n      invalidatesTags: [\"playlist\"],\n    }),\n    updatePlaylist: builder.mutation({\n      query: (data) => ({\n        url: `/api/playlists/${data.playlist_id}`,\n        body: data,\n        method: \"PUT\",\n        credentials: \"include\",\n      }),\n      invalidatesTags: [\"playlist\"],\n    }),\n    deleteSong: builder.mutation({\n      query: (data) => ({\n        url: `/api/playlists/${data.playlist_id}/songs/${data.song_id}`,\n        body: data.song_id,\n        method: \"delete\",\n        credentials: \"include\",\n      }),\n      invalidatesTags: [\"songs\"],\n    }),\n    getAllSongsInPlaylist: builder.query({\n      query: (playlist_id) => ({\n      url: `/api/playlists/${playlist_id}/songs`,\n      credentials: \"include\"}),\n      providesTags: [\"songs\"],\n    }),\n    createSongInPlaylist: builder.mutation({\n      query: (data) => ({\n        url: `/api/playlists/${data.playlist_id}/songs`,\n        body: data,\n        method: \"POST\",\n        credentials: \"include\",\n      }),\n      invalidatesTags: [\"playlist\"],\n    }),\n    searchSpotify: builder.query({\n      query: (data) => ({\n        url: `/api/spotify`,\n        body: data,\n        method: \"GET\",\n      }),\n    }),\n    searchSpotifyGenre: builder.query({\n      query: (data) => ({\n        url: `/api/spotify/genres`,\n        body: data,\n        method: \"GET\",\n      }),\n    }),\n    getAllGenre: builder.query({\n      query: () => `/api/spotify/all_genres`,\n    }),\n    getSpotifyArtist: builder.query({\n      query: (data) => ({\n        url: `/api/spotify/artists/${data.id}`,\n        body: data,\n        method: \"GET\",\n      }),\n    }),\n    getSpotifyAlbum: builder.query({\n      query: (data) => ({\n        url: `/api/spotify/albums/${data.id}`,\n        body: data,\n        method: \"GET\",\n      }),\n    }),\n    getSpotifyTrack: builder.query({\n      query: (data) => ({\n        url: `/api/spotify/tracks/${data.id}`,\n        body: data,\n        method: \"GET\",\n      }),\n    }),\n    getSpotifyRecommendations: builder.query({\n      query: (data) => ({\n        url: `/api/spotify/recommendations/`,\n        body: data,\n        method: \"GET\",\n      }),\n    }),\n    getSpotifyRandom: builder.query({\n      query: () => `/api/spotify/random`,\n    }),\n    getSpotifyRandomArtist: builder.query({\n      query: () => `/api/spotify/randomartists`,\n    }),\n    getToken: builder.query({\n      query: () => ({\n        url: `/token`,\n        credentials: \"include\",\n      }),\n      transformResponse: (response) => response?.account || null,\n      providesTags: [\"Account\"],\n    }),\n    logout: builder.mutation({\n      query: () => ({\n        url: `/token`,\n        method: \"DELETE\",\n        credentials: \"include\",\n      }),\n      invalidatesTags: [\"Account\"],\n    }),\n    login: builder.mutation({\n      query: (info) => {\n        const formData = new FormData();\n        formData.append(\"username\", info.username);\n        formData.append(\"password\", info.password);\n        return ({\n          url: \"/token\",\n          method: \"POST\",\n          body: formData,\n          credentials: \"include\",\n        });\n      },\n      invalidatesTags: [\"Account\"],\n    }),\n    signup: builder.mutation({\n      query: (data) => ({\n        url: `/api/accounts`,\n        body: data,\n        method: \"POST\",\n        credentials: \"include\",\n      }),\n      invalidatesTags: [\"Account\"],\n    }),\n  }),\n});\n\nexport const {\n  useGetTokenQuery,\n  useSignupMutation,\n  useLoginMutation,\n  useLogoutMutation,\n  useGetAllPlaylistQuery,\n  useCreatePlaylistMutation,\n  useGetSpecificPlaylistQuery,\n  useDeletePlaylistMutation,\n  useUpdatePlaylistMutation,\n  useDeleteSongMutation,\n  useGetAllSongsInPlaylistQuery,\n  useCreateSongInPlaylistMutation,\n  useSearchSpotifyGenreQuery,\n  useGetAllGenreQuery,\n  useGetSpotifyArtistQuery,\n  useGetSpotifyAlbumQuery,\n  useGetSpotifyTrackQuery,\n  useGetSpotifyRecommendationsQuery,\n  useGetSpotifyRandomQuery,\n  useGetSpotifyRandomArtistQuery,\n} = stupifyApi;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}